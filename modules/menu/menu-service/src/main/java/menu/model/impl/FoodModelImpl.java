/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package menu.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import menu.model.Food;
import menu.model.FoodModel;
import menu.model.FoodSoap;

/**
 * The base model implementation for the Food service. Represents a row in the &quot;Menu_Food&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>FoodModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FoodImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FoodImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class FoodModelImpl extends BaseModelImpl<Food> implements FoodModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a food model instance should use the <code>Food</code> interface instead.
	 */
	public static final String TABLE_NAME = "Menu_Food";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"foodId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"details", Types.VARCHAR},
		{"spicy", Types.BOOLEAN}, {"price", Types.INTEGER},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foodId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("details", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spicy", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("price", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Menu_Food (uuid_ VARCHAR(75) null,foodId LONG not null primary key,name VARCHAR(75) null,details VARCHAR(75) null,spicy BOOLEAN,price INTEGER,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table Menu_Food";

	public static final String ORDER_BY_JPQL = " ORDER BY food.foodId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY Menu_Food.foodId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(
		menu.service.util.ServiceProps.get(
			"value.object.entity.cache.enabled.menu.model.Food"),
		true);

	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(
		menu.service.util.ServiceProps.get(
			"value.object.finder.cache.enabled.menu.model.Food"),
		true);

	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(
		menu.service.util.ServiceProps.get(
			"value.object.column.bitmask.enabled.menu.model.Food"),
		true);

	public static final long NAME_COLUMN_BITMASK = 1L;

	public static final long PRICE_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long FOODID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Food toModel(FoodSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Food model = new FoodImpl();

		model.setUuid(soapModel.getUuid());
		model.setFoodId(soapModel.getFoodId());
		model.setName(soapModel.getName());
		model.setDetails(soapModel.getDetails());
		model.setSpicy(soapModel.isSpicy());
		model.setPrice(soapModel.getPrice());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Food> toModels(FoodSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Food> models = new ArrayList<Food>(soapModels.length);

		for (FoodSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(
		menu.service.util.ServiceProps.get(
			"lock.expiration.time.menu.model.Food"));

	public FoodModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _foodId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFoodId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _foodId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Food.class;
	}

	@Override
	public String getModelClassName() {
		return Food.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Food, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Food, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Food, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Food)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Food, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Food, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((Food)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Food, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Food, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Food>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Food.class.getClassLoader(), Food.class, ModelWrapper.class);

		try {
			Constructor<Food> constructor =
				(Constructor<Food>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Food, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Food, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Food, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Food, Object>>();
		Map<String, BiConsumer<Food, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Food, ?>>();

		attributeGetterFunctions.put(
			"uuid",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getUuid();
				}

			});
		attributeSetterBiConsumers.put(
			"uuid",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object uuid) {
					food.setUuid((String)uuid);
				}

			});
		attributeGetterFunctions.put(
			"foodId",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getFoodId();
				}

			});
		attributeSetterBiConsumers.put(
			"foodId",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object foodId) {
					food.setFoodId((Long)foodId);
				}

			});
		attributeGetterFunctions.put(
			"name",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getName();
				}

			});
		attributeSetterBiConsumers.put(
			"name",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object name) {
					food.setName((String)name);
				}

			});
		attributeGetterFunctions.put(
			"details",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getDetails();
				}

			});
		attributeSetterBiConsumers.put(
			"details",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object details) {
					food.setDetails((String)details);
				}

			});
		attributeGetterFunctions.put(
			"spicy",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getSpicy();
				}

			});
		attributeSetterBiConsumers.put(
			"spicy",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object spicy) {
					food.setSpicy((Boolean)spicy);
				}

			});
		attributeGetterFunctions.put(
			"price",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getPrice();
				}

			});
		attributeSetterBiConsumers.put(
			"price",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object price) {
					food.setPrice((Integer)price);
				}

			});
		attributeGetterFunctions.put(
			"createDate",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getCreateDate();
				}

			});
		attributeSetterBiConsumers.put(
			"createDate",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object createDate) {
					food.setCreateDate((Date)createDate);
				}

			});
		attributeGetterFunctions.put(
			"modifiedDate",
			new Function<Food, Object>() {

				@Override
				public Object apply(Food food) {
					return food.getModifiedDate();
				}

			});
		attributeSetterBiConsumers.put(
			"modifiedDate",
			new BiConsumer<Food, Object>() {

				@Override
				public void accept(Food food, Object modifiedDate) {
					food.setModifiedDate((Date)modifiedDate);
				}

			});

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getFoodId() {
		return _foodId;
	}

	@Override
	public void setFoodId(long foodId) {
		_columnBitmask = -1L;

		_foodId = foodId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public String getDetails() {
		if (_details == null) {
			return "";
		}
		else {
			return _details;
		}
	}

	@Override
	public void setDetails(String details) {
		_details = details;
	}

	@JSON
	@Override
	public boolean getSpicy() {
		return _spicy;
	}

	@JSON
	@Override
	public boolean isSpicy() {
		return _spicy;
	}

	@Override
	public void setSpicy(boolean spicy) {
		_spicy = spicy;
	}

	@JSON
	@Override
	public int getPrice() {
		return _price;
	}

	@Override
	public void setPrice(int price) {
		_columnBitmask |= PRICE_COLUMN_BITMASK;

		if (!_setOriginalPrice) {
			_setOriginalPrice = true;

			_originalPrice = _price;
		}

		_price = price;
	}

	public int getOriginalPrice() {
		return _originalPrice;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Food.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Food toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Food>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FoodImpl foodImpl = new FoodImpl();

		foodImpl.setUuid(getUuid());
		foodImpl.setFoodId(getFoodId());
		foodImpl.setName(getName());
		foodImpl.setDetails(getDetails());
		foodImpl.setSpicy(isSpicy());
		foodImpl.setPrice(getPrice());
		foodImpl.setCreateDate(getCreateDate());
		foodImpl.setModifiedDate(getModifiedDate());

		foodImpl.resetOriginalValues();

		return foodImpl;
	}

	@Override
	public int compareTo(Food food) {
		int value = 0;

		if (getFoodId() < food.getFoodId()) {
			value = -1;
		}
		else if (getFoodId() > food.getFoodId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Food)) {
			return false;
		}

		Food food = (Food)obj;

		long primaryKey = food.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		FoodModelImpl foodModelImpl = this;

		foodModelImpl._originalUuid = foodModelImpl._uuid;

		foodModelImpl._originalName = foodModelImpl._name;

		foodModelImpl._originalPrice = foodModelImpl._price;

		foodModelImpl._setOriginalPrice = false;

		foodModelImpl._setModifiedDate = false;

		foodModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Food> toCacheModel() {
		FoodCacheModel foodCacheModel = new FoodCacheModel();

		foodCacheModel.uuid = getUuid();

		String uuid = foodCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			foodCacheModel.uuid = null;
		}

		foodCacheModel.foodId = getFoodId();

		foodCacheModel.name = getName();

		String name = foodCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			foodCacheModel.name = null;
		}

		foodCacheModel.details = getDetails();

		String details = foodCacheModel.details;

		if ((details != null) && (details.length() == 0)) {
			foodCacheModel.details = null;
		}

		foodCacheModel.spicy = isSpicy();

		foodCacheModel.price = getPrice();

		Date createDate = getCreateDate();

		if (createDate != null) {
			foodCacheModel.createDate = createDate.getTime();
		}
		else {
			foodCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			foodCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			foodCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return foodCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Food, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Food, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Food, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Food)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Food, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Food, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Food, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Food)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Food>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private String _uuid;
	private String _originalUuid;
	private long _foodId;
	private String _name;
	private String _originalName;
	private String _details;
	private boolean _spicy;
	private int _price;
	private int _originalPrice;
	private boolean _setOriginalPrice;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private Food _escapedModel;

}